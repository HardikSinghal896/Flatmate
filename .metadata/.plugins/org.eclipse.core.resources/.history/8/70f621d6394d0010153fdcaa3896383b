package app.controller;

import java.io.File;
import java.io.IOException;
import java.net.http.HttpRequest;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import app.entity.RoomDetails;
import app.entity.UserDetails;
import app.entity.Users;
import app.service.RoomService;
import app.service.UserService;
import ch.qos.logback.core.status.Status;
import jakarta.servlet.http.HttpServletRequest;

@RestController
@ResponseBody
@RequestMapping("/api/v1")
@CrossOrigin
public class UserController {
	@Autowired
	RoomService service;
	
	@Autowired 
	UserService service2;

	@Value("${upload.directory}")
	private String uploadDirectory;

	@GetMapping("/")
	public ResponseEntity<String> test() {
		System.out.println("asdf");
		return new ResponseEntity<>("Hello", HttpStatus.OK);
	}

	@PostMapping("/push")
	public ResponseEntity<String> registerMethod(@RequestParam(name = "email") String email,
			@RequestParam(name = "number") int number, @RequestParam(name = "password") String passw,
			@RequestParam(name = "file") MultipartFile file, @RequestParam(name = "type") String type) throws IOException {

		System.out.println(file.getOriginalFilename());
		String filePath = uploadDirectory + File.separator + file.getOriginalFilename();

		file.transferTo(new File(filePath));
		String URL = "http://localhost:9090/uploads/" + file.getOriginalFilename();
		UserDetails user = new UserDetails(email, number, passw, URL);
		service.saveData(user);
		return new ResponseEntity<>("register", HttpStatus.OK);
	}

	@PostMapping("/newroommate")
	public ResponseEntity<String> newRoommate(@RequestParam(name = "location") String loc,
			@RequestParam(name = "gender") String gender, @RequestParam(name = "sharing") String sharing,
			@RequestParam(name = "rent") String rent, @RequestParam(name = "name") String name,
			@RequestParam(name = "file") MultipartFile[] files, @RequestParam(name = "type") String type) throws IllegalStateException, IOException {
		String[] filenames = new String[files.length];
		for (int i = 0; i < files.length; i++) {
			filenames[i] = "http://localhost:9090/uploads/" + files[i].getOriginalFilename();
			String filePath = uploadDirectory + File.separator + files[i].getOriginalFilename();
			files[i].transferTo(new File(filePath));
		}
		RoomDetails roomDetails = new RoomDetails(0, loc, rent, gender, name, sharing, filenames, type);
		System.out.println(roomDetails);
		System.out.println(filenames[0]);
		service.saveAllData(roomDetails);
		return new ResponseEntity<>("newRoommate", HttpStatus.OK);
	}

	@GetMapping("/roomslist")
	public ResponseEntity<List<RoomDetails>> getRoomsData() {
		return new ResponseEntity<>(service.getAllData(), HttpStatus.OK);
	}

	@GetMapping("/room/{id}")
	public ResponseEntity<Optional<RoomDetails>> getRoom(@PathVariable(name = "id") String id) {
		return new ResponseEntity<>(service.getData(id), HttpStatus.OK);
	}

	@GetMapping("/current-user")
	public String getLoggedInUser(Principal principal) {
		return principal.getName();
	}
	
	@GetMapping("/isAuthenticated")
	public CsrfToken homePage(HttpServletRequest httpServletRequest) {
		System.out.println(httpServletRequest.getAttribute("_csrf"));
		return (CsrfToken) httpServletRequest.getAttribute("_csrf");
	}
	
	@PostMapping("/saveUser")
	public Users saveTheUser(@RequestBody Users user) {
		return service2.saveUser(user);
	}
	
	@PostMapping("/login")
	public String login(@RequestBody Users user) {
		return "success";
	}
}
